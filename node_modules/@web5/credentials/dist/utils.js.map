{
  "version": 3,
  "sources": ["../src/utils.ts"],
  "sourcesContent": ["/**\n * Retrieves the current timestamp in XML Schema 1.1.2 date-time format.\n *\n * This function omits the milliseconds part from the ISO 8601 timestamp, returning a date-time\n * string in the format \"yyyy-MM-ddTHH:mm:ssZ\".\n *\n * @example\n * ```ts\n * const currentTimestamp = getCurrentXmlSchema112Timestamp(); // \"2023-08-23T12:34:56Z\"\n * ```\n *\n * @returns The current timestamp in XML Schema 1.1.2 format.\n */\nexport function getCurrentXmlSchema112Timestamp(): string {\n  // Omit the milliseconds part from toISOString() output\n  return new Date().toISOString().replace(/\\.\\d+Z$/, 'Z');\n}\n\n/**\n * Calculates a future timestamp in XML Schema 1.1.2 date-time format based on a given number of\n * seconds.\n *\n * This function takes a number of seconds and adds it to the current timestamp, returning a\n * date-time string in the format \"yyyy-MM-ddTHH:mm:ssZ\" without milliseconds.\n *\n * @example\n * ```ts\n * const futureTimestamp = getFutureXmlSchema112Timestamp(60); // \"2023-08-23T12:35:56Z\"\n * ```\n *\n * @param secondsInFuture - The number of seconds to project into the future.\n * @returns The future timestamp in XML Schema 1.1.2 format.\n */\nexport function getFutureXmlSchema112Timestamp(secondsInFuture: number): string {\n  const futureDate = new Date(Date.now() + secondsInFuture * 1000);\n  return futureDate.toISOString().replace(/\\.\\d+Z$/, 'Z');\n}\n\n/**\n * Validates a timestamp string against the XML Schema 1.1.2 date-time format.\n *\n * This function checks whether the provided timestamp string conforms to the\n * format \"yyyy-MM-ddTHH:mm:ssZ\", without milliseconds, as defined in XML Schema 1.1.2.\n *\n * @example\n * ```ts\n * const isValid = isValidXmlSchema112Timestamp('2023-08-23T12:34:56Z'); // true\n * ```\n *\n * @param timestamp - The timestamp string to validate.\n * @returns `true` if the timestamp is valid, `false` otherwise.\n */\nexport function isValidXmlSchema112Timestamp(timestamp: string): boolean {\n  // Format: yyyy-MM-ddTHH:mm:ssZ\n  const regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/;\n  if (!regex.test(timestamp)) {\n    return false;\n  }\n\n  const date = new Date(timestamp);\n\n  return !isNaN(date.getTime());\n}"],
  "mappings": "AAaO,SAASA,GAA0C,CAExD,OAAO,IAAI,KAAK,EAAE,YAAY,EAAE,QAAQ,UAAW,GAAG,CACxD,CAiBO,SAASC,EAA+BC,EAAiC,CAE9E,OADmB,IAAI,KAAK,KAAK,IAAI,EAAIA,EAAkB,GAAI,EAC7C,YAAY,EAAE,QAAQ,UAAW,GAAG,CACxD,CAgBO,SAASC,EAA6BC,EAA4B,CAGvE,GAAI,CADU,yCACH,KAAKA,CAAS,EACvB,MAAO,GAGT,IAAMC,EAAO,IAAI,KAAKD,CAAS,EAE/B,MAAO,CAAC,MAAMC,EAAK,QAAQ,CAAC,CAC9B",
  "names": ["getCurrentXmlSchema112Timestamp", "getFutureXmlSchema112Timestamp", "secondsInFuture", "isValidXmlSchema112Timestamp", "timestamp", "date"]
}
