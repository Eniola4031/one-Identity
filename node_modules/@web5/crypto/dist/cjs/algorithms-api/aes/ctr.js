"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseAesCtrAlgorithm = void 0;
var common_1 = require("@web5/common");
var base_js_1 = require("./base.js");
var errors_js_1 = require("../errors.js");
var utils_js_1 = require("../../utils.js");
var BaseAesCtrAlgorithm = /** @class */ (function (_super) {
    __extends(BaseAesCtrAlgorithm, _super);
    function BaseAesCtrAlgorithm() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.keyOperations = ['encrypt', 'decrypt', 'wrapKey', 'unwrapKey'];
        return _this;
    }
    BaseAesCtrAlgorithm.prototype.checkAlgorithmOptions = function (options) {
        var algorithm = options.algorithm;
        // Algorithm specified in the operation must match the algorithm implementation processing the operation.
        this.checkAlgorithmName({ algorithmName: algorithm.name });
        // The algorithm object must contain a counter property.
        (0, utils_js_1.checkRequiredProperty)({ property: 'counter', inObject: algorithm });
        // The counter must a Uint8Array.
        if (!((0, common_1.universalTypeOf)(algorithm.counter) === 'Uint8Array')) {
            throw new TypeError("Algorithm 'counter' is not of type: Uint8Array.");
        }
        // The initial value of the counter block must be 16 bytes long (the AES block size).
        if (algorithm.counter.byteLength !== 16) {
            throw new errors_js_1.OperationError("Algorithm 'counter' must have length: 16 bytes.");
        }
        // The algorithm object must contain a length property.
        (0, utils_js_1.checkRequiredProperty)({ property: 'length', inObject: algorithm });
        // The length specified must be a number.
        if ((0, common_1.universalTypeOf)(algorithm.length) !== 'Number') {
            throw new TypeError("Algorithm 'length' is not of type: Number.");
        }
        // The length specified must be between 1 and 128.
        if ((algorithm.length < 1 || algorithm.length > 128)) {
            throw new errors_js_1.OperationError("Algorithm 'length' should be in the range: 1 to 128.");
        }
    };
    BaseAesCtrAlgorithm.prototype.checkDecryptOptions = function (options) {
        var algorithm = options.algorithm, key = options.key, data = options.data;
        // Validate the algorithm input parameters.
        this.checkAlgorithmOptions({ algorithm: algorithm });
        // Validate the secret key.
        this.checkSecretKey({ key: key });
        // If specified, the secret key must be allowed to be used for 'decrypt' operations.
        if (key.key_ops) {
            this.checkKeyOperations({ keyOperations: ['decrypt'], allowedKeyOperations: key.key_ops });
        }
        // The data must be a Uint8Array.
        if ((0, common_1.universalTypeOf)(data) !== 'Uint8Array') {
            throw new TypeError('The data must be of type Uint8Array.');
        }
    };
    BaseAesCtrAlgorithm.prototype.checkEncryptOptions = function (options) {
        var algorithm = options.algorithm, key = options.key, data = options.data;
        // Validate the algorithm and key input parameters.
        this.checkAlgorithmOptions({ algorithm: algorithm });
        // Validate the secret key.
        this.checkSecretKey({ key: key });
        // If specified, the secret key must be allowed to be used for 'encrypt' operations.
        if (key.key_ops) {
            this.checkKeyOperations({ keyOperations: ['encrypt'], allowedKeyOperations: key.key_ops });
        }
        // The data must be a Uint8Array.
        if ((0, common_1.universalTypeOf)(data) !== 'Uint8Array') {
            throw new TypeError('The data must be of type Uint8Array.');
        }
    };
    return BaseAesCtrAlgorithm;
}(base_js_1.BaseAesAlgorithm));
exports.BaseAesCtrAlgorithm = BaseAesCtrAlgorithm;
//# sourceMappingURL=ctr.js.map