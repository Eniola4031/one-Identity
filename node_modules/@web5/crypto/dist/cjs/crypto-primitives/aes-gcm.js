"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AesGcm = void 0;
var common_1 = require("@web5/common");
var crypto_1 = require("@noble/hashes/crypto");
var jose_js_1 = require("../jose.js");
/**
 * The `AesGcm` class provides a comprehensive set of utilities for cryptographic operations
 * using the Advanced Encryption Standard (AES) in Galois/Counter Mode (GCM). This class includes
 * methods for key generation, encryption, decryption, and conversions between raw byte arrays
 * and JSON Web Key (JWK) formats. It is designed to support AES-GCM, a symmetric key algorithm
 * that is widely used for its efficiency, security, and provision of authenticated encryption.
 *
 * AES-GCM is particularly favored for scenarios that require both confidentiality and integrity
 * of data. It integrates the counter mode of encryption with the Galois mode of authentication,
 * offering high performance and parallel processing capabilities.
 *
 * Key Features:
 * - Key Generation: Generate AES symmetric keys in JWK format.
 * - Key Conversion: Transform keys between raw byte arrays and JWK formats.
 * - Encryption: Encrypt data using AES-GCM with the provided symmetric key.
 * - Decryption: Decrypt data encrypted with AES-GCM using the corresponding symmetric key.
 *
 * The methods in this class are asynchronous, returning Promises to accommodate various
 * JavaScript environments.
 *
 * Usage Examples:
 *
 * ```ts
 * // Key Generation
 * const length = 256; // Length of the key in bits (e.g., 128, 192, 256)
 * const privateKey = await AesGcm.generateKey({ length });
 *
 * // Encryption
 * const data = new TextEncoder().encode('Hello, world!');
 * const iv = new Uint8Array(12); // 12-byte initialization vector
 * const encryptedData = await AesGcm.encrypt({
 *   data,
 *   iv,
 *   key: privateKey,
 *   tagLength: 128 // Length of the authentication tag in bits
 * });
 *
 * // Decryption
 * const decryptedData = await AesGcm.decrypt({
 *   data: encryptedData,
 *   iv,
 *   key: privateKey,
 *   tagLength: 128 // Length of the authentication tag in bits
 * });
 *
 * // Key Conversion
 * const privateKeyBytes = await AesGcm.privateKeyToBytes({ privateKey });
 * ```
 */
var AesGcm = /** @class */ (function () {
    function AesGcm() {
    }
    /**
   * Converts a raw private key in bytes to its corresponding JSON Web Key (JWK) format.
   *
   * This method accepts a symmetric key represented as a byte array (Uint8Array) and
   * converts it into a JWK object for use with AES-GCM (Advanced Encryption Standard -
   * Galois/Counter Mode). The conversion process involves encoding the key into
   * base64url format and setting the appropriate JWK parameters.
   *
   * The resulting JWK object includes the following properties:
   * - `kty`: Key Type, set to 'oct' for Octet Sequence (representing a symmetric key).
   * - `k`: The symmetric key, base64url-encoded.
   * - `kid`: Key ID, generated based on the JWK thumbprint.
   *
   * Example usage:
   *
   * ```ts
   * const privateKeyBytes = new Uint8Array([...]); // Replace with actual symmetric key bytes
   * const privateKey = await AesGcm.bytesToPrivateKey({ privateKeyBytes });
   * ```
   *
   * @param options - The options for the symmetric key conversion.
   * @param options.privateKeyBytes - The raw symmetric key as a Uint8Array.
   *
   * @returns A Promise that resolves to the symmetric key in JWK format.
   */
    AesGcm.bytesToPrivateKey = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var privateKeyBytes, privateKey, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        privateKeyBytes = options.privateKeyBytes;
                        privateKey = {
                            k: common_1.Convert.uint8Array(privateKeyBytes).toBase64Url(),
                            kty: 'oct'
                        };
                        // Compute the JWK thumbprint and set as the key ID.
                        _a = privateKey;
                        return [4 /*yield*/, jose_js_1.Jose.jwkThumbprint({ key: privateKey })];
                    case 1:
                        // Compute the JWK thumbprint and set as the key ID.
                        _a.kid = _b.sent();
                        return [2 /*return*/, privateKey];
                }
            });
        });
    };
    /**
     * Decrypts the provided data using AES-GCM.
     *
     * This method performs AES-GCM decryption on the given encrypted data using the specified key.
     * It requires an initialization vector (IV), the encrypted data along with the decryption key,
     * and optionally, additional authenticated data (AAD). The method returns the decrypted data as a
     * Uint8Array. The optional `tagLength` parameter specifies the size in bits of the authentication
     * tag used when encrypting the data. If not specified, the default tag length of 128 bits is
     * used.
     *
     * Example usage:
     *
     * ```ts
     * const encryptedData = new Uint8Array([...]); // Encrypted data
     * const iv = new Uint8Array([...]); // Initialization vector used during encryption
     * const additionalData = new Uint8Array([...]); // Optional additional authenticated data
     * const key = { ... }; // A PrivateKeyJwk object representing the AES key
     * const decryptedData = await AesGcm.decrypt({
     *   data: encryptedData,
     *   iv,
     *   additionalData,
     *   key,
     *   tagLength: 128 // Optional tag length in bits
     * });
     * ```
     *
     * @param options - The options for the decryption operation.
     * @param options.data - The encrypted data to decrypt, represented as a Uint8Array.
     * @param options.iv - The initialization vector, represented as a Uint8Array.
     * @param options.additionalData - Optional additional authenticated data.
     * @param options.key - The key to use for decryption, represented in JWK format.
     * @param options.tagLength - The length of the authentication tag in bits.
     *
     * @returns A Promise that resolves to the decrypted data as a Uint8Array.
     */
    AesGcm.decrypt = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var additionalData, data, iv, key, tagLength, webCryptoKey, algorithm, plaintextBuffer, plaintext;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        additionalData = options.additionalData, data = options.data, iv = options.iv, key = options.key, tagLength = options.tagLength;
                        return [4 /*yield*/, this.importKey(key)];
                    case 1:
                        webCryptoKey = _a.sent();
                        algorithm = (additionalData === undefined)
                            ? { name: 'AES-GCM', iv: iv, tagLength: tagLength }
                            : { name: 'AES-GCM', additionalData: additionalData, iv: iv, tagLength: tagLength };
                        return [4 /*yield*/, crypto_1.crypto.subtle.decrypt(algorithm, webCryptoKey, data)];
                    case 2:
                        plaintextBuffer = _a.sent();
                        plaintext = new Uint8Array(plaintextBuffer);
                        return [2 /*return*/, plaintext];
                }
            });
        });
    };
    /**
     * Encrypts the provided data using AES-GCM.
     *
     * This method performs AES-GCM encryption on the given data using the specified key.
     * It requires an initialization vector (IV), the encrypted data along with the decryption key,
     * and optionally, additional authenticated data (AAD). The method returns the encrypted data as a
     * Uint8Array. The optional `tagLength` parameter specifies the size in bits of the authentication
     * tag generated in the encryption operation and used for authentication in the corresponding
     * decryption. If not specified, the default tag length of 128 bits is used.
     *
     * Example usage:
     *
     * ```ts
     * const data = new TextEncoder().encode('Hello, world!');
     * const iv = new Uint8Array([...]); // Initialization vector
     * const additionalData = new Uint8Array([...]); // Optional additional authenticated data
     * const key = { ... }; // A PrivateKeyJwk object representing an AES key
     * const encryptedData = await AesGcm.encrypt({
     *   data,
     *   iv,
     *   additionalData,
     *   key,
     *   tagLength: 128 // Optional tag length in bits
     * });
     * ```
     *
     * @param options - The options for the encryption operation.
     * @param options.data - The data to encrypt, represented as a Uint8Array.
     * @param options.iv - The initialization vector, represented as a Uint8Array.
     * @param options.additionalData - Optional additional authenticated data.
     * @param options.key - The key to use for encryption, represented in JWK format.
     * @param options.tagLength - The length of the authentication tag in bits.
     *
     * @returns A Promise that resolves to the encrypted data as a Uint8Array.
     */
    AesGcm.encrypt = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var additionalData, data, iv, key, tagLength, webCryptoKey, algorithm, ciphertextBuffer, ciphertext;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        additionalData = options.additionalData, data = options.data, iv = options.iv, key = options.key, tagLength = options.tagLength;
                        return [4 /*yield*/, this.importKey(key)];
                    case 1:
                        webCryptoKey = _a.sent();
                        algorithm = (additionalData === undefined)
                            ? { name: 'AES-GCM', iv: iv, tagLength: tagLength }
                            : { name: 'AES-GCM', additionalData: additionalData, iv: iv, tagLength: tagLength };
                        return [4 /*yield*/, crypto_1.crypto.subtle.encrypt(algorithm, webCryptoKey, data)];
                    case 2:
                        ciphertextBuffer = _a.sent();
                        ciphertext = new Uint8Array(ciphertextBuffer);
                        return [2 /*return*/, ciphertext];
                }
            });
        });
    };
    /**
     * Generates a symmetric key for AES in Galois/Counter Mode (GCM) in JSON Web Key (JWK) format.
     *
     * This method creates a new symmetric key of a specified length suitable for use with
     * AES-GCM encryption. It leverages cryptographically secure random number generation
     * to ensure the uniqueness and security of the key. The generated key adheres to the JWK
     * format, facilitating compatibility with common cryptographic standards and ease of use
     * in various cryptographic applications.
     *
     * The generated key includes these components:
     * - `kty`: Key Type, set to 'oct' for Octet Sequence, indicating a symmetric key.
     * - `k`: The symmetric key component, base64url-encoded.
     * - `kid`: Key ID, generated based on the JWK thumbprint, providing a unique identifier.
     *
     * Example usage:
     *
     * ```ts
     * const length = 256; // Length of the key in bits (e.g., 128, 192, 256)
     * const privateKey = await AesGcm.generateKey({ length });
     * ```
     *
     * @param options - The options for the key generation.
     * @param options.length - The length of the key in bits. Common lengths are 128, 192, and 256 bits.
     *
     * @returns A Promise that resolves to the generated symmetric key in JWK format.
     */
    AesGcm.generateKey = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var length, lengthInBytes, privateKeyBytes, privateKey, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        length = options.length;
                        lengthInBytes = length / 8;
                        privateKeyBytes = crypto_1.crypto.getRandomValues(new Uint8Array(lengthInBytes));
                        return [4 /*yield*/, AesGcm.bytesToPrivateKey({ privateKeyBytes: privateKeyBytes })];
                    case 1:
                        privateKey = _b.sent();
                        // Compute the JWK thumbprint and set as the key ID.
                        _a = privateKey;
                        return [4 /*yield*/, jose_js_1.Jose.jwkThumbprint({ key: privateKey })];
                    case 2:
                        // Compute the JWK thumbprint and set as the key ID.
                        _a.kid = _b.sent();
                        return [2 /*return*/, privateKey];
                }
            });
        });
    };
    /**
     * Converts a private key from JSON Web Key (JWK) format to a raw byte array (Uint8Array).
     *
     * This method takes a symmetric key in JWK format and extracts its raw byte representation.
     * It focuses on the 'k' parameter of the JWK, which represents the symmetric key component
     * in base64url encoding. The method decodes this value into a byte array, providing
     * the symmetric key in its raw binary form.
     *
     * Example usage:
     *
     * ```ts
     * const privateKey = { ... }; // A symmetric key in JWK format
     * const privateKeyBytes = await AesGcm.privateKeyToBytes({ privateKey });
     * ```
     *
     * @param options - The options for the symmetric key conversion.
     * @param options.privateKey - The symmetric key in JWK format.
     *
     * @returns A Promise that resolves to the symmetric key as a Uint8Array.
     */
    AesGcm.privateKeyToBytes = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var privateKey, privateKeyBytes;
            return __generator(this, function (_a) {
                privateKey = options.privateKey;
                // Verify the provided JWK represents a valid oct private key.
                if (!jose_js_1.Jose.isOctPrivateKeyJwk(privateKey)) {
                    throw new Error("AesGcm: The provided key is not a valid oct private key.");
                }
                privateKeyBytes = common_1.Convert.base64Url(privateKey.k).toUint8Array();
                return [2 /*return*/, privateKeyBytes];
            });
        });
    };
    /**
     * A private method to import a key in JWK format for use with the Web Crypto API.
     *
     * @param key - The key in JWK format.
     * @returns A Promise that resolves to a CryptoKey.
     */
    AesGcm.importKey = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, crypto_1.crypto.subtle.importKey('jwk', // format
                    key, // keyData
                    { name: 'AES-GCM' }, // algorithm
                    true, // extractable
                    ['encrypt', 'decrypt'] // usages
                    )];
            });
        });
    };
    return AesGcm;
}());
exports.AesGcm = AesGcm;
//# sourceMappingURL=aes-gcm.js.map