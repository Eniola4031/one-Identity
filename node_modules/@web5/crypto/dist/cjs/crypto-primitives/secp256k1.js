"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Secp256k1 = void 0;
var common_1 = require("@web5/common");
var sha256_1 = require("@noble/hashes/sha256");
var secp256k1_1 = require("@noble/curves/secp256k1");
var utils_1 = require("@noble/curves/abstract/utils");
var jose_js_1 = require("../jose.js");
/**
 * The `Secp256k1` class provides a comprehensive suite of utilities for working with
 * the secp256k1 elliptic curve, commonly used in blockchain and cryptographic applications.
 * This class includes methods for key generation, conversion, signing, verification, and
 * Elliptic Curve Diffie-Hellman (ECDH) key agreement, all compliant with relevant cryptographic
 * standards.
 *
 * The class supports conversions between raw byte formats and JSON Web Key (JWK) formats,
 * making it versatile for various cryptographic tasks. It adheres to RFC6090 for ECDH and
 * RFC6979 for ECDSA signing and verification, ensuring compatibility and security.
 *
 * Key Features:
 * - Key Generation: Generate secp256k1 private keys in JWK format.
 * - Key Conversion: Transform keys between raw byte arrays and JWK formats.
 * - Public Key Derivation: Derive public keys from private keys.
 * - ECDH Shared Secret Computation: Securely derive shared secrets using private and public keys.
 * - ECDSA Signing and Verification: Sign data and verify signatures with secp256k1 keys.
 * - Key Validation: Validate the mathematical correctness of secp256k1 keys.
 *
 * The methods in this class are asynchronous, returning Promises to accommodate various
 * JavaScript environments.
 *
 * Usage Examples:
 *
 * ```ts
 * // Key Generation
 * const privateKey = await Secp256k1.generateKey();
 *
 * // Public Key Derivation
 * const publicKey = await Secp256k1.computePublicKey({ privateKey });
 *
 * // ECDH Shared Secret Computation
 * const sharedSecret = await Secp256k1.sharedSecret({
 *   privateKeyA: privateKey,
 *   publicKeyB: anotherPublicKey
 * });
 *
 * // ECDSA Signing
 * const signature = await Secp256k1.sign({
 *   data: new TextEncoder().encode('Message'),
 *   key: privateKey
 * });
 *
 * // ECDSA Signature Verification
 * const isValid = await Secp256k1.verify({
 *   data: new TextEncoder().encode('Message'),
 *   key: publicKey,
 *   signature: signature
 * });
 *
 * // Key Conversion
 * const publicKeyBytes = await Secp256k1.publicKeyToBytes({ publicKey });
 * const privateKeyBytes = await Secp256k1.privateKeyToBytes({ privateKey });
 * const compressedPublicKey = await Secp256k1.convertPublicKey({
 *   publicKey: publicKeyBytes,
 *   compressedPublicKey: true
 * });
 * const uncompressedPublicKey = await Secp256k1.convertPublicKey({
 *   publicKey: publicKeyBytes,
 *   compressedPublicKey: false
 * });
 *
 * // Key Validation
 * const isPrivateKeyValid = await Secp256k1.validatePrivateKey({ key: privateKeyBytes });
 * const isPublicKeyValid = await Secp256k1.validatePublicKey({ key: publicKeyBytes });
 * ```
 */
var Secp256k1 = /** @class */ (function () {
    function Secp256k1() {
    }
    /**
     * Converts a raw private key in bytes to its corresponding JSON Web Key (JWK) format.
     *
     * This method takes a private key represented as a byte array (Uint8Array) and
     * converts it into a JWK object. The conversion involves extracting the
     * elliptic curve points (x and y coordinates) from the private key and encoding
     * them into base64url format, alongside other JWK parameters.
     *
     * The resulting JWK object includes the following properties:
     * - `kty`: Key Type, set to 'EC' for Elliptic Curve.
     * - `crv`: Curve Name, set to 'secp256k1'.
     * - `d`: The private key component, base64url-encoded.
     * - `x`: The x-coordinate of the public key point, base64url-encoded.
     * - `y`: The y-coordinate of the public key point, base64url-encoded.
     *
     * This method is useful for converting raw public keys into a standardized
     * JSON format, facilitating their use in cryptographic operations and making
     * them easy to share and store.
     *
     * Example usage:
     *
     * ```ts
     * const privateKeyBytes = new Uint8Array([...]); // Replace with actual private key bytes
     * const privateKey = await Secp256k1.bytesToPrivateKey({ privateKeyBytes });
     * ```
     *
     * @param options - The options for the private key conversion.
     * @param options.privateKeyBytes - The raw private key as a Uint8Array.
     *
     * @returns A Promise that resolves to the private key in JWK format.
     */
    Secp256k1.bytesToPrivateKey = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var privateKeyBytes, points, privateKey, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        privateKeyBytes = options.privateKeyBytes;
                        return [4 /*yield*/, Secp256k1.getCurvePoints({ key: privateKeyBytes })];
                    case 1:
                        points = _b.sent();
                        privateKey = {
                            kty: 'EC',
                            crv: 'secp256k1',
                            d: common_1.Convert.uint8Array(privateKeyBytes).toBase64Url(),
                            x: common_1.Convert.uint8Array(points.x).toBase64Url(),
                            y: common_1.Convert.uint8Array(points.y).toBase64Url()
                        };
                        // Compute the JWK thumbprint and set as the key ID.
                        _a = privateKey;
                        return [4 /*yield*/, jose_js_1.Jose.jwkThumbprint({ key: privateKey })];
                    case 2:
                        // Compute the JWK thumbprint and set as the key ID.
                        _a.kid = _b.sent();
                        return [2 /*return*/, privateKey];
                }
            });
        });
    };
    /**
     * Converts a raw public key in bytes to its corresponding JSON Web Key (JWK) format.
     *
     * This method accepts a public key in a byte array (Uint8Array) format and
     * transforms it to a JWK object. It involves decoding the elliptic curve points
     * (x and y coordinates) from the raw public key bytes and encoding them into
     * base64url format, along with setting appropriate JWK parameters.
     *
     * The resulting JWK object includes the following properties:
     * - `kty`: Key Type, set to 'EC' for Elliptic Curve.
     * - `crv`: Curve Name, set to 'secp256k1'.
     * - `x`: The x-coordinate of the public key point, base64url-encoded.
     * - `y`: The y-coordinate of the public key point, base64url-encoded.
     *
     * This method is useful for converting raw public keys into a standardized
     * JSON format, facilitating their use in cryptographic operations and making
     * them easy to share and store.
     *
     * Example usage:
     *
     * ```ts
     * const publicKeyBytes = new Uint8Array([...]); // Replace with actual public key bytes
     * const publicKey = await Secp256k1.bytesToPublicKey({ publicKeyBytes });
     * ```
     *
     * @param options - The options for the public key conversion.
     * @param options.publicKeyBytes - The raw public key as a Uint8Array.
     *
     * @returns A Promise that resolves to the public key in JWK format.
     */
    Secp256k1.bytesToPublicKey = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var publicKeyBytes, points, publicKey, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        publicKeyBytes = options.publicKeyBytes;
                        return [4 /*yield*/, Secp256k1.getCurvePoints({ key: publicKeyBytes })];
                    case 1:
                        points = _b.sent();
                        publicKey = {
                            kty: 'EC',
                            crv: 'secp256k1',
                            x: common_1.Convert.uint8Array(points.x).toBase64Url(),
                            y: common_1.Convert.uint8Array(points.y).toBase64Url()
                        };
                        // Compute the JWK thumbprint and set as the key ID.
                        _a = publicKey;
                        return [4 /*yield*/, jose_js_1.Jose.jwkThumbprint({ key: publicKey })];
                    case 2:
                        // Compute the JWK thumbprint and set as the key ID.
                        _a.kid = _b.sent();
                        return [2 /*return*/, publicKey];
                }
            });
        });
    };
    /**
     * Converts a public key to its compressed form.
     *
     * This method takes a public key represented as a byte array and compresses it. Public key
     * compression is a process that reduces the size of the public key by removing the y-coordinate,
     * making it more efficient for storage and transmission. The compressed key retains the same
     * level of security as the uncompressed key.
     *
     * Example usage:
     *
     * ```ts
     * const uncompressedPublicKeyBytes = new Uint8Array([...]); // Replace with actual uncompressed public key bytes
     * const compressedPublicKey = await Secp256k1.compressPublicKey({
     *   publicKeyBytes: uncompressedPublicKeyBytes
     * });
     * ```
     *
     * @param options - The options for the public key compression.
     * @param options.publicKeyBytes - The public key as a Uint8Array.
     *
     * @returns A Promise that resolves to the compressed public key as a Uint8Array.
     */
    Secp256k1.compressPublicKey = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var publicKeyBytes, point;
            return __generator(this, function (_a) {
                publicKeyBytes = options.publicKeyBytes;
                point = secp256k1_1.secp256k1.ProjectivePoint.fromHex(publicKeyBytes);
                // Return the compressed form of the public key.
                return [2 /*return*/, point.toRawBytes(true)];
            });
        });
    };
    /**
     * Converts a public key to its uncompressed form.
     *
     * This method takes a compressed public key represented as a byte array and decompresses it.
     * Public key decompression involves reconstructing the y-coordinate from the x-coordinate,
     * resulting in the full public key. This method is used when the uncompressed key format is
     * required for certain cryptographic operations or interoperability.
     *
     * Example usage:
     *
     * ```ts
     * const compressedPublicKeyBytes = new Uint8Array([...]); // Replace with actual compressed public key bytes
     * const decompressedPublicKey = await Secp256k1.decompressPublicKey({
     *   publicKeyBytes: compressedPublicKeyBytes
     * });
     * ```
     *
     * @param options - The options for the public key decompression.
     * @param options.publicKeyBytes - The public key as a Uint8Array.
     *
     * @returns A Promise that resolves to the uncompressed public key as a Uint8Array.
     */
    Secp256k1.decompressPublicKey = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var publicKeyBytes, point;
            return __generator(this, function (_a) {
                publicKeyBytes = options.publicKeyBytes;
                point = secp256k1_1.secp256k1.ProjectivePoint.fromHex(publicKeyBytes);
                // Return the uncompressed form of the public key.
                return [2 /*return*/, point.toRawBytes(false)];
            });
        });
    };
    /**
     * Derives the public key in JWK format from a given private key.
     *
     * This method takes a private key in JWK format and derives its corresponding public key,
     * also in JWK format. The derivation process involves converting the private key to a raw
     * byte array, then computing the elliptic curve points (x and y coordinates) from this private
     * key. These coordinates are then encoded into base64url format to construct the public key in
     * JWK format.
     *
     * The process ensures that the derived public key correctly corresponds to the given private key,
     * adhering to the secp256k1 elliptic curve standards. This method is useful in cryptographic
     * operations where a public key is needed for operations like signature verification, but only
     * the private key is available.
     *
     * Example usage:
     *
     * ```ts
     * const privateKeyJwk = { ... }; // A PrivateKeyJwk object representing a secp256k1 private key
     * const publicKeyJwk = await Secp256k1.computePublicKey({ privateKey: privateKeyJwk });
     * ```
     *
     * @param options - The options for the public key derivation.
     * @param options.privateKey - The private key in JWK format from which to derive the public key.
     *
     * @returns A Promise that resolves to the derived public key in JWK format.
     */
    Secp256k1.computePublicKey = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var privateKey, privateKeyBytes, points, publicKey, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        privateKey = options.privateKey;
                        return [4 /*yield*/, Secp256k1.privateKeyToBytes({ privateKey: privateKey })];
                    case 1:
                        privateKeyBytes = _b.sent();
                        return [4 /*yield*/, Secp256k1.getCurvePoints({ key: privateKeyBytes })];
                    case 2:
                        points = _b.sent();
                        publicKey = {
                            kty: 'EC',
                            crv: 'secp256k1',
                            x: common_1.Convert.uint8Array(points.x).toBase64Url(),
                            y: common_1.Convert.uint8Array(points.y).toBase64Url()
                        };
                        // Compute the JWK thumbprint and set as the key ID.
                        _a = publicKey;
                        return [4 /*yield*/, jose_js_1.Jose.jwkThumbprint({ key: publicKey })];
                    case 3:
                        // Compute the JWK thumbprint and set as the key ID.
                        _a.kid = _b.sent();
                        return [2 /*return*/, publicKey];
                }
            });
        });
    };
    /**
     * Generates a secp256k1 private key in JSON Web Key (JWK) format.
     *
     * This method creates a new private key suitable for use with the secp256k1
     * elliptic curve. The key is generated using cryptographically secure random
     * number generation to ensure its uniqueness and security. The resulting
     * private key adheres to the JWK format, specifically tailored for secp256k1,
     * making it compatible with common cryptographic standards and easy to use in
     * various cryptographic processes.
     *
     * The private key generated by this method includes the following components:
     * - `kty`: Key Type, set to 'EC' for Elliptic Curve.
     * - `crv`: Curve Name, set to 'secp256k1'.
     * - `d`: The private key component, base64url-encoded.
     * - `x`: The x-coordinate of the public key point, derived from the private key, base64url-encoded.
     * - `y`: The y-coordinate of the public key point, derived from the private key, base64url-encoded.
     *
     * The key is returned in a format suitable for direct use in signin and key agreement operations.
     *
     * Example usage:
     *
     * ```ts
     * const privateKey = await Secp256k1.generateKey();
     * ```
     *
     * @returns A Promise that resolves to the generated private key in JWK format.
     */
    Secp256k1.generateKey = function () {
        return __awaiter(this, void 0, void 0, function () {
            var privateKeyBytes, privateKey, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        privateKeyBytes = secp256k1_1.secp256k1.utils.randomPrivateKey();
                        return [4 /*yield*/, Secp256k1.bytesToPrivateKey({ privateKeyBytes: privateKeyBytes })];
                    case 1:
                        privateKey = _b.sent();
                        // Compute the JWK thumbprint and set as the key ID.
                        _a = privateKey;
                        return [4 /*yield*/, jose_js_1.Jose.jwkThumbprint({ key: privateKey })];
                    case 2:
                        // Compute the JWK thumbprint and set as the key ID.
                        _a.kid = _b.sent();
                        return [2 /*return*/, privateKey];
                }
            });
        });
    };
    /**
     * Converts a private key from JSON Web Key (JWK) format to a raw byte array (Uint8Array).
     *
     * This method takes a private key in JWK format and extracts its raw byte representation.
     * It specifically focuses on the 'd' parameter of the JWK, which represents the private
     * key component in base64url encoding. The method decodes this value into a byte array.
     *
     * This conversion is essential for operations that require the private key in its raw
     * binary form, such as certain low-level cryptographic operations or when interfacing
     * with systems and libraries that expect keys in a byte array format.
     *
     * Example usage:
     *
     * ```ts
     * const privateKey = { ... }; // An X25519 private key in JWK format
     * const privateKeyBytes = await Secp256k1.privateKeyToBytes({ privateKey });
     * ```
     *
     * @param options - The options for the private key conversion.
     * @param options.privateKey - The private key in JWK format.
     *
     * @returns A Promise that resolves to the private key as a Uint8Array.
     */
    Secp256k1.privateKeyToBytes = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var privateKey, privateKeyBytes;
            return __generator(this, function (_a) {
                privateKey = options.privateKey;
                // Verify the provided JWK represents a valid EC secp256k1 private key.
                if (!jose_js_1.Jose.isEcPrivateKeyJwk(privateKey)) {
                    throw new Error("Secp256k1: The provided key is not a valid EC private key.");
                }
                privateKeyBytes = common_1.Convert.base64Url(privateKey.d).toUint8Array();
                return [2 /*return*/, privateKeyBytes];
            });
        });
    };
    /**
     * Converts a public key from JSON Web Key (JWK) format to a raw byte array (Uint8Array).
     *
     * This method accepts a public key in JWK format and converts it into its raw binary
     * form. The conversion process involves decoding the 'x' and 'y' parameters of the JWK
     * (which represent the x and y coordinates of the elliptic curve point, respectively)
     * from base64url format into a byte array. The method then concatenates these values,
     * along with a prefix indicating the key format, to form the full public key.
     *
     * This function is particularly useful for use cases where the public key is needed
     * in its raw byte format, such as for certain cryptographic operations or when
     * interfacing with systems that require raw key formats.
     *
     * Example usage:
     *
     * ```ts
     * const publicKey = { ... }; // A PublicKeyJwk object
     * const publicKeyBytes = await Secp256k1.publicKeyToBytes({ publicKey });
     * ```
     *
     * @param options - The options for the public key conversion.
     * @param options.publicKey - The public key in JWK format.
     *
     * @returns A Promise that resolves to the public key as a Uint8Array.
     */
    Secp256k1.publicKeyToBytes = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var publicKey, prefix, x, y, publicKeyBytes;
            return __generator(this, function (_a) {
                publicKey = options.publicKey;
                // Verify the provided JWK represents a valid EC secp256k1 public key, which must have a 'y' value.
                if (!(jose_js_1.Jose.isEcPublicKeyJwk(publicKey) && publicKey.y)) {
                    throw new Error("Secp256k1: The provided key is not a valid EC public key.");
                }
                prefix = new Uint8Array([0x04]);
                x = common_1.Convert.base64Url(publicKey.x).toUint8Array();
                y = common_1.Convert.base64Url(publicKey.y).toUint8Array();
                publicKeyBytes = new Uint8Array(__spreadArray(__spreadArray(__spreadArray([], __read(prefix), false), __read(x), false), __read(y), false));
                return [2 /*return*/, publicKeyBytes];
            });
        });
    };
    /**
     * Computes an RFC6090-compliant Elliptic Curve Diffie-Hellman (ECDH) shared secret
     * using secp256k1 private and public keys in JSON Web Key (JWK) format.
     *
     * This method facilitates the ECDH key agreement protocol, which is a method of securely
     * deriving a shared secret between two parties based on their private and public keys.
     * It takes the private key of one party (privateKeyA) and the public key of another
     * party (publicKeyB) to compute a shared secret. The shared secret is derived from the
     * x-coordinate of the elliptic curve point resulting from the multiplication of the
     * public key with the private key.
     *
     * Note: When performing Elliptic Curve Diffie-Hellman (ECDH) key agreement,
     * the resulting shared secret is a point on the elliptic curve, which
     * consists of an x-coordinate and a y-coordinate. With a 256-bit curve like
     * secp256k1, each of these coordinates is 32 bytes (256 bits) long. However,
     * in the ECDH process, it's standard practice to use only the x-coordinate
     * of the shared secret point as the resulting shared key. This is because
     * the y-coordinate does not add to the entropy of the key, and both parties
     * can independently compute the x-coordinate.  Consquently, this implementation
     * omits the y-coordinate for simplicity and standard compliance.
     *
     * Example usage:
     *
     * ```ts
     * const privateKeyA = { ... }; // A PrivateKeyJwk object for party A
     * const publicKeyB = { ... }; // A PublicKeyJwk object for party B
     * const sharedSecret = await Secp256k1.sharedSecret({
     *   privateKeyA,
     *   publicKeyB
     * });
     * ```
     *
     * @param options - The options for the shared secret computation operation.
     * @param options.privateKeyA - The private key in JWK format of one party.
     * @param options.publicKeyB - The public key in JWK format of the other party.
     *
     * @returns A Promise that resolves to the computed shared secret as a Uint8Array.
     */
    Secp256k1.sharedSecret = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var privateKeyA, publicKeyB, privateKeyABytes, publicKeyBBytes, sharedSecret;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        privateKeyA = options.privateKeyA, publicKeyB = options.publicKeyB;
                        // Ensure that keys from the same key pair are not specified.
                        if ('x' in privateKeyA && 'x' in publicKeyB && privateKeyA.x === publicKeyB.x) {
                            throw new Error("Secp256k1: ECDH shared secret cannot be computed from a single key pair's public and private keys.");
                        }
                        return [4 /*yield*/, Secp256k1.privateKeyToBytes({ privateKey: privateKeyA })];
                    case 1:
                        privateKeyABytes = _a.sent();
                        return [4 /*yield*/, Secp256k1.publicKeyToBytes({ publicKey: publicKeyB })];
                    case 2:
                        publicKeyBBytes = _a.sent();
                        sharedSecret = secp256k1_1.secp256k1.getSharedSecret(privateKeyABytes, publicKeyBBytes, true);
                        // Remove the leading byte that indicates the sign of the y-coordinate
                        // of the point on the elliptic curve.  See note above.
                        return [2 /*return*/, sharedSecret.slice(1)];
                }
            });
        });
    };
    /**
     * Generates an RFC6979-compliant ECDSA signature of given data using a secp256k1 private key.
     *
     * This method signs the provided data with a specified private key using the ECDSA
     * (Elliptic Curve Digital Signature Algorithm) signature algorithm, as defined in RFC6979.
     * The data to be signed is first hashed using the SHA-256 algorithm, and this hash is then
     * signed using the private key. The output is a digital signature in the form of a
     * Uint8Array, which uniquely corresponds to both the data and the private key used for signing.
     *
     * This method is commonly used in cryptographic applications to ensure data integrity and
     * authenticity. The signature can later be verified by parties with access to the corresponding
     * public key, ensuring that the data has not been tampered with and was indeed signed by the
     * holder of the private key.
     *
     * Example usage:
     *
     * ```ts
     * const data = new TextEncoder().encode('Hello, world!'); // Data to be signed
     * const privateKey = { ... }; // A PrivateKeyJwk object representing a secp256k1 private key
     * const signature = await Secp256k1.sign({
     *   data,
     *   key: privateKey
     * });
     * ```
     *
     * @param options - The options for the signing operation.
     * @param options.data - The data to sign, represented as a Uint8Array.
     * @param options.key - The private key to use for signing, represented in JWK format.
     *
     * @returns A Promise that resolves to the signature as a Uint8Array.
     */
    Secp256k1.sign = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var data, key, privateKeyBytes, digest, signatureObject, signature;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        data = options.data, key = options.key;
                        return [4 /*yield*/, Secp256k1.privateKeyToBytes({ privateKey: key })];
                    case 1:
                        privateKeyBytes = _a.sent();
                        digest = (0, sha256_1.sha256)(data);
                        signatureObject = secp256k1_1.secp256k1.sign(digest, privateKeyBytes);
                        signature = signatureObject.toCompactRawBytes();
                        return [2 /*return*/, signature];
                }
            });
        });
    };
    /**
     * Verifies an RFC6979-compliant ECDSA signature against given data and a secp256k1 public key.
     *
     * This method validates a digital signature to ensure that it was generated by the holder of the
     * corresponding private key and that the signed data has not been altered. The signature
     * verification is performed using the ECDSA (Elliptic Curve Digital Signature Algorithm) as
     * specified in RFC6979. The data to be verified is first hashed using the SHA-256 algorithm, and
     * this hash is then used along with the public key to verify the signature.
     *
     * The method returns a boolean value indicating whether the signature is valid. A valid signature
     * proves that the signed data was indeed signed by the owner of the private key corresponding to
     * the provided public key and that the data has not been tampered with since it was signed.
     *
     * Note: The verification process does not consider the malleability of low-s signatures, which
     * may be relevant in certain contexts, such as Bitcoin transactions.
     *
     * Example usage:
     *
     * ```ts
     * const data = new TextEncoder().encode('Hello, world!'); // Data that was signed
     * const publicKey = { ... }; // Public key in JWK format corresponding to the private key that signed the data
     * const signature = new Uint8Array([...]); // Signature to verify
     * const isSignatureValid = await Secp256k1.verify({
     *   data,
     *   key: publicKey,
     *   signature
     * });
     * console.log(isSignatureValid); // true if the signature is valid, false otherwise
     * ```
     *
     * @param options - The options for the verification operation.
     * @param options.data - The data that was signed, represented as a Uint8Array.
     * @param options.key - The public key used for verification, represented in JWK format.
     * @param options.signature - The signature to verify, represented as a Uint8Array.
     *
     * @returns A Promise that resolves to a boolean indicating whether the signature is valid.
     */
    Secp256k1.verify = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var data, key, signature, publicKeyBytes, digest, isValid;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        data = options.data, key = options.key, signature = options.signature;
                        return [4 /*yield*/, Secp256k1.publicKeyToBytes({ publicKey: key })];
                    case 1:
                        publicKeyBytes = _a.sent();
                        digest = (0, sha256_1.sha256)(data);
                        isValid = secp256k1_1.secp256k1.verify(signature, digest, publicKeyBytes, { lowS: false });
                        return [2 /*return*/, isValid];
                }
            });
        });
    };
    /**
     * Returns the elliptic curve points (x and y coordinates) for a given secp256k1 key.
     *
     * This method extracts the elliptic curve points from a given secp256k1 key, whether
     * it's a private or a public key. For a private key, the method first computes the
     * corresponding public key and then extracts the x and y coordinates. For a public key,
     * it directly returns these coordinates. The coordinates are represented as Uint8Array.
     *
     * The x and y coordinates represent the key's position on the elliptic curve and can be
     * used in various cryptographic operations, such as digital signatures or key agreement
     * protocols.
     *
     * Example usage:
     *
     * ```ts
     * // For a private key
     * const privateKey = new Uint8Array([...]); // A 32-byte private key
     * const { x: xFromPrivateKey, y: yFromPrivateKey } = await Secp256k1.getCurvePoints({ key: privateKey });
     *
     * // For a public key
     * const publicKey = new Uint8Array([...]); // A 33-byte or 65-byte public key
     * const { x: xFromPublicKey, y: yFromPublicKey } = await Secp256k1.getCurvePoints({ key: publicKey });
     * ```
     *
     * @param options - The options for the operation.
     * @param options.key - The key for which to get the elliptic curve points.
     *                      Can be either a private key or a public key.
     *                      The key should be passed as a Uint8Array.
     *
     * @returns A Promise that resolves to an object with properties 'x' and 'y',
     *          each being a Uint8Array representing the x and y coordinates of the key point on the
     *          elliptic curve.
     */
    Secp256k1.getCurvePoints = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var key, point, x, y;
            return __generator(this, function (_a) {
                key = options.key;
                // If key is a private key, first compute the public key.
                if (key.byteLength === 32) {
                    key = secp256k1_1.secp256k1.getPublicKey(key);
                }
                point = secp256k1_1.secp256k1.ProjectivePoint.fromHex(key);
                x = (0, utils_1.numberToBytesBE)(point.x, 32);
                y = (0, utils_1.numberToBytesBE)(point.y, 32);
                return [2 /*return*/, { x: x, y: y }];
            });
        });
    };
    /**
     * Validates a given private key to ensure its compliance with the secp256k1 curve standards.
     *
     * This method checks whether a provided private key is a valid 32-byte number and falls within
     * the range defined by the secp256k1 curve's order. It is essential for ensuring the private
     * key's mathematical correctness in the context of secp256k1-based cryptographic operations.
     *
     * Note that this validation strictly pertains to the key's format and numerical validity; it does
     * not assess whether the key corresponds to a known entity or its security status (e.g., whether
     * it has been compromised).
     *
     * Example usage:
     *
     * ```ts
     * const privateKey = new Uint8Array([...]); // A 32-byte private key
     * const isValid = await Secp256k1.validatePrivateKey({ key: privateKey });
     * console.log(isValid); // true or false based on the key's validity
     * ```
     *
     * @param options - The options for the key validation.
     * @param options.key - The private key to validate, represented as a Uint8Array.
     *
     * @returns A Promise that resolves to a boolean indicating whether the private key is valid.
     */
    Secp256k1.validatePrivateKey = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var key;
            return __generator(this, function (_a) {
                key = options.key;
                return [2 /*return*/, secp256k1_1.secp256k1.utils.isValidPrivateKey(key)];
            });
        });
    };
    /**
     * Validates a given public key to confirm its mathematical correctness on the secp256k1 curve.
     *
     * This method checks if the provided public key represents a valid point on the secp256k1 curve.
     * It decodes the key's Weierstrass points (x and y coordinates) and verifies their validity
     * against the curve's parameters. A valid point must lie on the curve and meet specific
     * mathematical criteria defined by the curve's equation.
     *
     * It's important to note that this method does not verify the key's ownership or whether it has
     * been compromised; it solely focuses on the key's adherence to the curve's mathematical
     * principles.
     *
     * Example usage:
     *
     * ```ts
     * const publicKey = new Uint8Array([...]); // A public key in byte format
     * const isValid = await Secp256k1.validatePublicKey({ key: publicKey });
     * console.log(isValid); // true if the key is valid on the secp256k1 curve, false otherwise
     * ```
     *
     * @param options - The options for the public key validation.
     * @param options.key - The public key to validate, represented as a Uint8Array.
     *
     * @returns A Promise that resolves to a boolean indicating the public key's validity on
     *          the secp256k1 curve.
     */
    Secp256k1.validatePublicKey = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var key, point;
            return __generator(this, function (_a) {
                key = options.key;
                try {
                    point = secp256k1_1.secp256k1.ProjectivePoint.fromHex(key);
                    // Check if points are on the Short Weierstrass curve.
                    point.assertValidity();
                }
                catch (error) {
                    return [2 /*return*/, false];
                }
                return [2 /*return*/, true];
            });
        });
    };
    return Secp256k1;
}());
exports.Secp256k1 = Secp256k1;
//# sourceMappingURL=secp256k1.js.map