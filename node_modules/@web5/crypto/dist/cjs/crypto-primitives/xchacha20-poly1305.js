"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.XChaCha20Poly1305 = void 0;
var common_1 = require("@web5/common");
var chacha_1 = require("@noble/ciphers/chacha");
var jose_js_1 = require("../jose.js");
var TAG_LENGTH = 16;
/**
 * The `XChaCha20Poly1305` class provides a suite of utilities for cryptographic operations
 * using the XChaCha20-Poly1305 algorithm, a combination of the XChaCha20 stream cipher and the
 * Poly1305 message authentication code (MAC). This class encompasses methods for key generation,
 * encryption, decryption, and conversions between raw byte arrays and JSON Web Key (JWK) formats.
 *
 * XChaCha20-Poly1305 is renowned for its high security and efficiency, especially in scenarios
 * involving large data volumes or where data integrity and confidentiality are paramount. The
 * extended nonce size of XChaCha20 reduces the risks of nonce reuse, while Poly1305 provides
 * a strong MAC ensuring data integrity.
 *
 * Key Features:
 * - Key Generation: Generate XChaCha20-Poly1305 symmetric keys in JWK format.
 * - Key Conversion: Transform keys between raw byte arrays and JWK formats.
 * - Encryption: Encrypt data using XChaCha20-Poly1305, returning both ciphertext and MAC tag.
 * - Decryption: Decrypt data and verify integrity using the XChaCha20-Poly1305 algorithm.
 *
 * The methods in this class are asynchronous, returning Promises to accommodate various
 * JavaScript environments.
 *
 * Usage Examples:
 *
 * ```ts
 * // Key Generation
 * const privateKey = await XChaCha20Poly1305.generateKey();
 *
 * // Encryption
 * const data = new TextEncoder().encode('Hello, world!');
 * const nonce = crypto.getRandomValues(new Uint8Array(24)); // 24-byte nonce
 * const additionalData = new TextEncoder().encode('Associated data');
 * const { ciphertext, tag } = await XChaCha20Poly1305.encrypt({
 *   data,
 *   nonce,
 *   additionalData,
 *   key: privateKey
 * });
 *
 * // Decryption
 * const decryptedData = await XChaCha20Poly1305.decrypt({
 *   data: ciphertext,
 *   nonce,
 *   tag,
 *   additionalData,
 *   key: privateKey
 * });
 *
 * // Key Conversion
 * const privateKeyBytes = await XChaCha20Poly1305.privateKeyToBytes({ privateKey });
 * ```
 */
var XChaCha20Poly1305 = /** @class */ (function () {
    function XChaCha20Poly1305() {
    }
    /**
     * Converts a raw private key in bytes to its corresponding JSON Web Key (JWK) format.
     *
     * This method takes a symmetric key represented as a byte array (Uint8Array) and converts it into
     * a JWK object for use with the XChaCha20-Poly1305 algorithm. The process involves encoding the
     * key into base64url format and setting the appropriate JWK parameters.
     *
     * The resulting JWK object includes the following properties:
     * - `kty`: Key Type, set to 'oct' for Octet Sequence (representing a symmetric key).
     * - `k`: The symmetric key, base64url-encoded.
     * - `kid`: Key ID, generated based on the JWK thumbprint.
     *
     * Example usage:
     *
     * ```ts
     * const privateKeyBytes = new Uint8Array([...]); // Replace with actual symmetric key bytes
     * const privateKey = await XChaCha20Poly1305.bytesToPrivateKey({ privateKeyBytes });
     * ```
     *
     * @param options - The options for the symmetric key conversion.
     * @param options.privateKeyBytes - The raw symmetric key as a Uint8Array.
     *
     * @returns A Promise that resolves to the symmetric key in JWK format.
     */
    XChaCha20Poly1305.bytesToPrivateKey = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var privateKeyBytes, privateKey, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        privateKeyBytes = options.privateKeyBytes;
                        privateKey = {
                            k: common_1.Convert.uint8Array(privateKeyBytes).toBase64Url(),
                            kty: 'oct'
                        };
                        // Compute the JWK thumbprint and set as the key ID.
                        _a = privateKey;
                        return [4 /*yield*/, jose_js_1.Jose.jwkThumbprint({ key: privateKey })];
                    case 1:
                        // Compute the JWK thumbprint and set as the key ID.
                        _a.kid = _b.sent();
                        return [2 /*return*/, privateKey];
                }
            });
        });
    };
    /**
     * Decrypts the provided data using XChaCha20-Poly1305.
     *
     * This method performs XChaCha20-Poly1305 decryption on the given encrypted data using the
     * specified key, nonce, and authentication tag. It supports optional additional authenticated
     * data (AAD) for enhanced security. The nonce must be 24 bytes long, consistent with XChaCha20's
     * specifications.
     *
     * Example usage:
     *
     * ```ts
     * const encryptedData = new Uint8Array([...]); // Encrypted data
     * const nonce = new Uint8Array(24); // 24-byte nonce
     * const tag = new Uint8Array([...]); // Authentication tag
     * const additionalData = new Uint8Array([...]); // Optional AAD
     * const key = { ... }; // A PrivateKeyJwk object representing the XChaCha20-Poly1305 key
     * const decryptedData = await XChaCha20Poly1305.decrypt({
     *   data: encryptedData,
     *   nonce,
     *   tag,
     *   additionalData,
     *   key
     * });
     * ```
     *
     * @param options - The options for the decryption operation.
     * @param options.data - The encrypted data to decrypt, represented as a Uint8Array.
     * @param options.key - The key to use for decryption, represented in JWK format.
     * @param options.nonce - The nonce used during the encryption process.
     * @param options.tag - The authentication tag generated during encryption.
     * @param options.additionalData - Optional additional authenticated data.
     *
     * @returns A Promise that resolves to the decrypted data as a Uint8Array.
     */
    XChaCha20Poly1305.decrypt = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var additionalData, data, key, nonce, tag, privateKeyBytes, xc20p, ciphertext, plaintext;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        additionalData = options.additionalData, data = options.data, key = options.key, nonce = options.nonce, tag = options.tag;
                        return [4 /*yield*/, XChaCha20Poly1305.privateKeyToBytes({ privateKey: key })];
                    case 1:
                        privateKeyBytes = _a.sent();
                        xc20p = (0, chacha_1.xchacha20poly1305)(privateKeyBytes, nonce, additionalData);
                        ciphertext = new Uint8Array(__spreadArray(__spreadArray([], __read(data), false), __read(tag), false));
                        plaintext = xc20p.decrypt(ciphertext);
                        return [2 /*return*/, plaintext];
                }
            });
        });
    };
    /**
     * Encrypts the provided data using XChaCha20-Poly1305.
     *
     * This method performs XChaCha20-Poly1305 encryption on the given data using the specified key
     * and nonce. It supports optional additional authenticated data (AAD) for enhanced security. The
     * nonce must be 24 bytes long, as per XChaCha20's specifications. The method returns the
     * encrypted data along with an authentication tag as a Uint8Array, ensuring both confidentiality
     * and integrity of the data.
     *
     * Example usage:
     *
     * ```ts
     * const data = new TextEncoder().encode('Hello, world!');
     * const nonce = crypto.getRandomValues(new Uint8Array(24)); // 24-byte nonce
     * const additionalData = new TextEncoder().encode('Associated data'); // Optional AAD
     * const key = { ... }; // A PrivateKeyJwk object representing an XChaCha20-Poly1305 key
     * const { ciphertext, tag } = await XChaCha20Poly1305.encrypt({
     *   data,
     *   nonce,
     *   additionalData,
     *   key
     * });
     * ```
     *
     * @param options - The options for the encryption operation.
     * @param options.data - The data to encrypt, represented as a Uint8Array.
     * @param options.key - The key to use for encryption, represented in JWK format.
     * @param options.nonce - A 24-byte nonce for the encryption process.
     * @param options.additionalData - Optional additional authenticated data.
     *
     * @returns A Promise that resolves to an object containing the encrypted data (`ciphertext`) and
     *          the authentication tag (`tag`).
     */
    XChaCha20Poly1305.encrypt = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var additionalData, data, key, nonce, privateKeyBytes, xc20p, cipherOutput, ciphertext, tag;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        additionalData = options.additionalData, data = options.data, key = options.key, nonce = options.nonce;
                        return [4 /*yield*/, XChaCha20Poly1305.privateKeyToBytes({ privateKey: key })];
                    case 1:
                        privateKeyBytes = _a.sent();
                        xc20p = (0, chacha_1.xchacha20poly1305)(privateKeyBytes, nonce, additionalData);
                        cipherOutput = xc20p.encrypt(data);
                        ciphertext = cipherOutput.subarray(0, -TAG_LENGTH);
                        tag = cipherOutput.subarray(-TAG_LENGTH);
                        return [2 /*return*/, { ciphertext: ciphertext, tag: tag }];
                }
            });
        });
    };
    /**
     * Generates a symmetric key for XChaCha20-Poly1305 in JSON Web Key (JWK) format.
     *
     * This method creates a new symmetric key suitable for use with the XChaCha20-Poly1305 algorithm.
     * The key is generated using cryptographically secure random number generation to ensure its
     * uniqueness and security. The XChaCha20-Poly1305 algorithm requires a 256-bit key (32 bytes),
     * and this method adheres to that specification.
     *
     * Key components included in the JWK:
     * - `kty`: Key Type, set to 'oct' for Octet Sequence.
     * - `k`: The symmetric key component, base64url-encoded.
     * - `kid`: Key ID, generated based on the JWK thumbprint.
     *
     * Example usage:
     *
     * ```ts
     * const privateKey = await XChaCha20Poly1305.generateKey();
     * ```
     *
     * @returns A Promise that resolves to the generated symmetric key in JWK format.
     */
    XChaCha20Poly1305.generateKey = function () {
        return __awaiter(this, void 0, void 0, function () {
            var privateKeyBytes, privateKey, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        privateKeyBytes = crypto.getRandomValues(new Uint8Array(32));
                        return [4 /*yield*/, XChaCha20Poly1305.bytesToPrivateKey({ privateKeyBytes: privateKeyBytes })];
                    case 1:
                        privateKey = _b.sent();
                        // Compute the JWK thumbprint and set as the key ID.
                        _a = privateKey;
                        return [4 /*yield*/, jose_js_1.Jose.jwkThumbprint({ key: privateKey })];
                    case 2:
                        // Compute the JWK thumbprint and set as the key ID.
                        _a.kid = _b.sent();
                        return [2 /*return*/, privateKey];
                }
            });
        });
    };
    /**
     * Converts a private key from JSON Web Key (JWK) format to a raw byte array (Uint8Array).
     *
     * This method takes a symmetric key in JWK format and extracts its raw byte representation.
     * It decodes the 'k' parameter of the JWK value, which represents the symmetric key in base64url
     * encoding, into a byte array.
     *
     * Example usage:
     *
     * ```ts
     * const privateKey = { ... }; // A symmetric key in JWK format
     * const privateKeyBytes = await XChaCha20Poly1305.privateKeyToBytes({ privateKey });
     * ```
     *
     * @param options - The options for the symmetric key conversion.
     * @param options.privateKey - The symmetric key in JWK format.
     *
     * @returns A Promise that resolves to the symmetric key as a Uint8Array.
     */
    XChaCha20Poly1305.privateKeyToBytes = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var privateKey, privateKeyBytes;
            return __generator(this, function (_a) {
                privateKey = options.privateKey;
                // Verify the provided JWK represents a valid oct private key.
                if (!jose_js_1.Jose.isOctPrivateKeyJwk(privateKey)) {
                    throw new Error("XChaCha20Poly1305: The provided key is not a valid oct private key.");
                }
                privateKeyBytes = common_1.Convert.base64Url(privateKey.k).toUint8Array();
                return [2 /*return*/, privateKeyBytes];
            });
        });
    };
    return XChaCha20Poly1305;
}());
exports.XChaCha20Poly1305 = XChaCha20Poly1305;
//# sourceMappingURL=xchacha20-poly1305.js.map