var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Secp256k1, X25519 } from '../crypto-primitives/index.js';
import { BaseEcdhAlgorithm, OperationError } from '../algorithms-api/index.js';
export class EcdhAlgorithm extends BaseEcdhAlgorithm {
    constructor() {
        super(...arguments);
        this.names = ['ECDH'];
        this.curves = ['secp256k1', 'X25519'];
    }
    deriveBits(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { algorithm, baseKey, length } = options;
            // Validate the input parameters.
            this.checkDeriveBitsOptions({ algorithm, baseKey });
            let sharedSecret;
            const curve = baseKey.crv; // checkDeriveBitsOptions verifies that the base key is of type EC or OKP.
            switch (curve) {
                case 'secp256k1': {
                    sharedSecret = yield Secp256k1.sharedSecret({
                        privateKeyA: baseKey,
                        publicKeyB: algorithm.publicKey
                    });
                    break;
                }
                case 'X25519': {
                    sharedSecret = yield X25519.sharedSecret({
                        privateKeyA: baseKey,
                        publicKeyB: algorithm.publicKey
                    });
                    break;
                }
                default: {
                    throw new TypeError(`Out of range: '${curve}'. Must be one of '${this.curves.join(', ')}'`);
                }
            }
            // If 'length' is not specified, return the full derived secret.
            if (length === undefined)
                return sharedSecret;
            // If the length is not a multiple of 8, throw.
            if (length && length % 8 !== 0) {
                throw new OperationError(`To be compatible with all browsers, 'length' must be a multiple of 8.`);
            }
            // Convert length from bits to bytes.
            const lengthInBytes = length / 8;
            // If length (converted to bytes) is larger than the derived secret, throw.
            if (sharedSecret.byteLength < lengthInBytes) {
                throw new OperationError(`Requested 'length' exceeds the byte length of the derived secret.`);
            }
            // Otherwise, either return the secret or a truncated slice.
            return lengthInBytes === sharedSecret.byteLength ?
                sharedSecret :
                sharedSecret.slice(0, lengthInBytes);
        });
    }
    generateKey(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { algorithm, keyOperations } = options;
            // Validate the input parameters.
            this.checkGenerateKeyOptions({ algorithm, keyOperations });
            let privateKey;
            switch (algorithm.curve) {
                case 'secp256k1': {
                    privateKey = yield Secp256k1.generateKey();
                    break;
                }
                case 'X25519': {
                    privateKey = yield X25519.generateKey();
                    break;
                }
                // Default case not needed because checkGenerateKeyOptions() already validates the specified curve is supported.
            }
            if (privateKey) {
                if (keyOperations)
                    privateKey.key_ops = keyOperations;
                return privateKey;
            }
            throw new Error('Operation failed: generateKey');
        });
    }
}
//# sourceMappingURL=ecdh.js.map