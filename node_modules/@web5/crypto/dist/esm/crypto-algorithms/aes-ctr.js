var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { AesCtr } from '../crypto-primitives/index.js';
import { BaseAesCtrAlgorithm } from '../algorithms-api/index.js';
export class AesCtrAlgorithm extends BaseAesCtrAlgorithm {
    constructor() {
        super(...arguments);
        this.names = ['A128CTR', 'A192CTR', 'A256CTR'];
    }
    decrypt(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { algorithm, key, data } = options;
            // Validate the input parameters.
            this.checkDecryptOptions(options);
            const plaintext = AesCtr.decrypt({
                counter: algorithm.counter,
                data: data,
                key: key,
                length: algorithm.length
            });
            return plaintext;
        });
    }
    encrypt(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { algorithm, key, data } = options;
            // Validate the input parameters.
            this.checkEncryptOptions(options);
            const ciphertext = AesCtr.encrypt({
                counter: algorithm.counter,
                data: data,
                key: key,
                length: algorithm.length
            });
            return ciphertext;
        });
    }
    generateKey(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { algorithm, keyOperations } = options;
            // Validate the input parameters.
            this.checkGenerateKeyOptions({ algorithm, keyOperations });
            // Map algorithm name to key length.
            const algorithmNameToLength = {
                A128CTR: 128,
                A192CTR: 192,
                A256CTR: 256
            };
            const secretKey = yield AesCtr.generateKey({ length: algorithmNameToLength[algorithm.name] });
            if (secretKey) {
                secretKey.alg = algorithm.name;
                if (keyOperations)
                    secretKey.key_ops = keyOperations;
                return secretKey;
            }
            throw new Error('Operation failed: generateKey');
        });
    }
}
//# sourceMappingURL=aes-ctr.js.map