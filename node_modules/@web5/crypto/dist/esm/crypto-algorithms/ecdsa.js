var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Secp256k1 } from '../crypto-primitives/index.js';
import { BaseEcdsaAlgorithm } from '../algorithms-api/index.js';
export class EcdsaAlgorithm extends BaseEcdsaAlgorithm {
    constructor() {
        super(...arguments);
        this.names = ['ES256K'];
        this.curves = ['secp256k1'];
    }
    generateKey(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { algorithm, keyOperations } = options;
            // Validate the input parameters.
            this.checkGenerateKeyOptions({ algorithm, keyOperations });
            let privateKey;
            switch (algorithm.curve) {
                case 'secp256k1': {
                    privateKey = yield Secp256k1.generateKey();
                    privateKey.alg = 'ES256K';
                    break;
                }
                // Default case unnecessary because checkGenerateKeyOptions() validates the input parameters.
            }
            if (privateKey) {
                if (keyOperations)
                    privateKey.key_ops = keyOperations;
                return privateKey;
            }
            throw new Error('Operation failed: generateKey');
        });
    }
    sign(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { key, data } = options;
            // Validate the input parameters.
            this.checkSignOptions(options);
            const curve = key.crv; // checkSignOptions verifies that the key is an EC private key.
            switch (curve) {
                case 'secp256k1': {
                    return yield Secp256k1.sign({ key, data });
                }
                // Default case unnecessary because checkSignOptions() validates the input parameters.
            }
            throw new Error('Operation failed: sign');
        });
    }
    verify(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { key, signature, data } = options;
            // Validate the input parameters.
            this.checkVerifyOptions(options);
            const curve = key.crv; // checkVerifyOptions verifies that the key is an EC public key.
            switch (curve) {
                case 'secp256k1': {
                    return yield Secp256k1.verify({ key, signature, data });
                }
                // Default case unnecessary because checkVerifyOptions() validates the input parameters.
            }
            throw new Error('Operation failed: verify');
        });
    }
}
//# sourceMappingURL=ecdsa.js.map