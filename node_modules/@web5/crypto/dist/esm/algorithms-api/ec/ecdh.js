var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Jose } from '../../jose.js';
import { InvalidAccessError } from '../errors.js';
import { BaseEllipticCurveAlgorithm } from './base.js';
import { checkRequiredProperty } from '../../utils.js';
export class BaseEcdhAlgorithm extends BaseEllipticCurveAlgorithm {
    constructor() {
        super(...arguments);
        this.keyOperations = ['deriveBits', 'deriveKey'];
    }
    checkDeriveBitsOptions(options) {
        const { algorithm, baseKey } = options;
        // Algorithm specified in the operation must match the algorithm implementation processing the operation.
        this.checkAlgorithmName({ algorithmName: algorithm.name });
        // The algorithm object must contain a publicKey property.
        checkRequiredProperty({ property: 'publicKey', inObject: algorithm });
        // The publicKey object must be a JSON Web key (JWK).
        this.checkJwk({ key: algorithm.publicKey });
        // The publicKey object must be of key type EC or OKP.
        this.checkKeyType({ keyType: algorithm.publicKey.kty, allowedKeyTypes: ['EC', 'OKP'] });
        // The publicKey object must be an Elliptic Curve (EC) or Octet Key Pair (OKP) public key in JWK format.
        if (!(Jose.isEcPublicKeyJwk(algorithm.publicKey) || Jose.isOkpPublicKeyJwk(algorithm.publicKey))) {
            throw new InvalidAccessError(`Requested operation is only valid for public keys.`);
        }
        // If specified, the public key's `key_ops` must include the 'deriveBits' operation.
        if (algorithm.publicKey.key_ops) {
            this.checkKeyOperations({ keyOperations: ['deriveBits'], allowedKeyOperations: algorithm.publicKey.key_ops });
        }
        // The options object must contain a baseKey property.
        checkRequiredProperty({ property: 'baseKey', inObject: options });
        // The baseKey object must be a JSON Web Key (JWK).
        this.checkJwk({ key: baseKey });
        // The baseKey object must be of key type EC or OKP.
        this.checkKeyType({ keyType: baseKey.kty, allowedKeyTypes: ['EC', 'OKP'] });
        // The baseKey object must be an Elliptic Curve (EC) or Octet Key Pair (OKP) private key in JWK format.
        if (!(Jose.isEcPrivateKeyJwk(baseKey) || Jose.isOkpPrivateKeyJwk(baseKey))) {
            throw new InvalidAccessError(`Requested operation is only valid for private keys.`);
        }
        // If specified, the base key's `key_ops` must include the 'deriveBits' operation.
        if (baseKey.key_ops) {
            this.checkKeyOperations({ keyOperations: ['deriveBits'], allowedKeyOperations: baseKey.key_ops });
        }
        // The public and base key types must match.
        if ((algorithm.publicKey.kty !== baseKey.kty)) {
            throw new InvalidAccessError('The key type of the publicKey and baseKey must match.');
        }
        // The public and base key curves must match.
        if (('crv' in algorithm.publicKey) && ('crv' in baseKey)
            && (algorithm.publicKey.crv !== baseKey.crv)) {
            throw new InvalidAccessError('The curve of the publicKey and baseKey must match.');
        }
    }
    sign() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new InvalidAccessError(`Requested operation 'sign' is not valid for ECDH algorithm.`);
        });
    }
    verify() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new InvalidAccessError(`Requested operation 'verify' is not valid for ECDH algorithm.`);
        });
    }
}
//# sourceMappingURL=ecdh.js.map