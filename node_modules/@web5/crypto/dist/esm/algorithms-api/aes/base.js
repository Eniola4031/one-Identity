var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Jose } from '../../jose.js';
import { InvalidAccessError } from '../errors.js';
import { checkRequiredProperty } from '../../utils.js';
import { CryptoAlgorithm } from '../crypto-algorithm.js';
export class BaseAesAlgorithm extends CryptoAlgorithm {
    checkGenerateKeyOptions(options) {
        const { algorithm, keyOperations } = options;
        // Algorithm specified in the operation must match the algorithm implementation processing the operation.
        this.checkAlgorithmName({ algorithmName: algorithm.name });
        // If specified, key operations must be permitted by the algorithm implementation processing the operation.
        if (keyOperations) {
            this.checkKeyOperations({ keyOperations, allowedKeyOperations: this.keyOperations });
        }
    }
    checkSecretKey(options) {
        const { key } = options;
        // The options object must contain a key property.
        checkRequiredProperty({ property: 'key', inObject: options });
        // The key object must be a JSON Web key (JWK).
        this.checkJwk({ key });
        // The key object must be an octet sequence (oct) private key in JWK format.
        if (!Jose.isOctPrivateKeyJwk(key)) {
            throw new InvalidAccessError('Requested operation is only valid for oct private keys.');
        }
        // If specified, the key's algorithm must match the algorithm implementation processing the operation.
        if (key.alg) {
            this.checkKeyAlgorithm({ keyAlgorithmName: key.alg });
        }
    }
    deriveBits() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new InvalidAccessError(`Requested operation 'deriveBits' is not valid for AES algorithm.`);
        });
    }
    sign() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new InvalidAccessError(`Requested operation 'sign' is not valid for AES algorithm.`);
        });
    }
    verify() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new InvalidAccessError(`Requested operation 'verify' is not valid for AES algorithm.`);
        });
    }
}
//# sourceMappingURL=base.js.map