type DeriveKeyOptions = {
    hash: 'SHA-256' | 'SHA-384' | 'SHA-512';
    password: Uint8Array;
    salt: Uint8Array;
    iterations: number;
    length: number;
};
/**
 * The `Pbkdf2` class provides a secure way to derive cryptographic keys from a password
 * using the PBKDF2 (Password-Based Key Derivation Function 2) algorithm. This class
 * supports both the Web Crypto API and Node.js Crypto module to offer flexibility in
 * different JavaScript environments.
 *
 * The PBKDF2 algorithm is widely used for generating keys from passwords, as it applies
 * a pseudorandom function to the input password along with a salt value and iterates the
 * process multiple times to increase the key's resistance to brute-force attacks.
 *
 * This class offers a single static method `deriveKey` to perform key derivation. It
 * automatically chooses between Web Crypto and Node.js Crypto based on the runtime
 * environment's support.
 *
 * Usage Examples:
 *
 * ```ts
 * const options = {
 *   hash: 'SHA-256', // The hash function to use ('SHA-256', 'SHA-384', 'SHA-512')
 *   password: new TextEncoder().encode('password'), // The password as a Uint8Array
 *   salt: new Uint8Array([...]), // The salt value
 *   iterations: 1000, // The number of iterations
 *   length: 256 // The length of the derived key in bits
 * };
 * const derivedKey = await Pbkdf2.deriveKey(options);
 * ```
 *
 * @remarks
 * This class relies on the availability of the Web Crypto API or Node.js Crypto module.
 * It falls back to Node.js Crypto if Web Crypto is not supported in the environment.
 */
export declare class Pbkdf2 {
    /**
     * Derives a cryptographic key from a password using the PBKDF2 algorithm.
     *
     * This method applies the PBKDF2 algorithm to the provided password along with
     * a salt value and iterates the process a specified number of times. It uses
     * a cryptographic hash function to enhance security and produce a key of the
     * desired length. The method is capable of utilizing either the Web Crypto API
     * or the Node.js Crypto module, depending on the environment's support.
     *
     * Example usage:
     *
     * ```ts
     * const options = {
     *   hash: 'SHA-256',
     *   password: new TextEncoder().encode('password'),
     *   salt: new Uint8Array([...]),
     *   iterations: 1000,
     *   length: 256
     * };
     * const derivedKey = await Pbkdf2.deriveKey(options);
     *
     * @param options - The options for key derivation.
     * @param options.hash - The hash function to use, such as 'SHA-256', 'SHA-384', or 'SHA-512'.
     * @param options.password - The password from which to derive the key, represented as a Uint8Array.
     * @param options.salt - The salt value to use in the derivation process, as a Uint8Array.
     * @param options.iterations - The number of iterations to apply in the PBKDF2 algorithm.
     * @param options.length - The desired length of the derived key in bits.
     *
     * @returns A Promise that resolves to the derived key as a Uint8Array.
     * ```
     */
    static deriveKey(options: DeriveKeyOptions): Promise<Uint8Array>;
    private static deriveKeyWithNodeCrypto;
    private static deriveKeyWithWebCrypto;
}
export {};
//# sourceMappingURL=pbkdf2.d.ts.map