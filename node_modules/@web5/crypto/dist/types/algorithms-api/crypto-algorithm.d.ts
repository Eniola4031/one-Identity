import type { Web5Crypto } from '../types/web5-crypto.js';
import type { JsonWebKey, JwkOperation, JwkType, PrivateKeyJwk, PublicKeyJwk } from '../jose.js';
export declare abstract class CryptoAlgorithm {
    /**
     * Name(s) of the algorithm supported by the implementation.
     */
    abstract readonly names: ReadonlyArray<string>;
    /**
     * Indicates which cryptographic operations are permissible to be used with this algorithm.
     */
    abstract readonly keyOperations: JwkOperation[];
    checkAlgorithmName(options: {
        algorithmName: string;
    }): void;
    checkJwk(options: {
        key: JsonWebKey;
    }): void;
    checkKeyAlgorithm(options: {
        keyAlgorithmName: string;
    }): void;
    checkKeyType(options: {
        keyType: JwkType;
        allowedKeyTypes: JwkType[];
    }): void;
    checkKeyOperations(options: {
        keyOperations: JwkOperation[];
        allowedKeyOperations: JwkOperation[];
    }): void;
    /**
     * Creates an instance of the class on which it is called.
     *
     * This is a generic factory method that creates an instance of any
     * crypto algorithm that extends this abstract class.
     *
     * @template T The type of the instance to be created.
     * @returns An instance of the class it is called on.
     * @throws {TypeError} If the class it is called on cannot be constructed.
     */
    static create<T extends CryptoAlgorithm>(this: new () => T): T;
    abstract decrypt(options: {
        algorithm: Web5Crypto.AlgorithmIdentifier | Web5Crypto.AesCtrOptions | Web5Crypto.AesGcmOptions;
        key: PrivateKeyJwk;
        data: Uint8Array;
    }): Promise<Uint8Array>;
    abstract deriveBits(options: {
        algorithm: Web5Crypto.AlgorithmIdentifier | Web5Crypto.EcdhDeriveKeyOptions | Web5Crypto.Pbkdf2Options;
        baseKey: JsonWebKey;
        length?: number;
    }): Promise<Uint8Array>;
    abstract encrypt(options: {
        algorithm: Web5Crypto.AlgorithmIdentifier | Web5Crypto.AesCtrOptions | Web5Crypto.AesGcmOptions;
        key: PrivateKeyJwk;
        data: Uint8Array;
    }): Promise<Uint8Array>;
    abstract generateKey(options: {
        algorithm: Partial<Web5Crypto.GenerateKeyOptions>;
        keyOperations?: JwkOperation[];
    }): Promise<PrivateKeyJwk>;
    abstract sign(options: {
        algorithm: Web5Crypto.AlgorithmIdentifier | Web5Crypto.EcdsaOptions | Web5Crypto.EdDsaOptions;
        key: PrivateKeyJwk;
        data: Uint8Array;
    }): Promise<Uint8Array>;
    abstract verify(options: {
        algorithm: Web5Crypto.AlgorithmIdentifier | Web5Crypto.EcdsaOptions | Web5Crypto.EdDsaOptions;
        key: PublicKeyJwk;
        signature: Uint8Array;
        data: Uint8Array;
    }): Promise<boolean>;
}
//# sourceMappingURL=crypto-algorithm.d.ts.map